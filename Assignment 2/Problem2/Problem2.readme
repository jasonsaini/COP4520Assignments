## Overview
This Java program simulates a scenario where guests at a party view a vase in a showroom. The program controls access to ensure that only one guest can view the vase at a time, reflecting a real-world scenario of managing limited resources.

## Features
- **Exclusive Access**: Utilizes a `Semaphore` to ensure that only one guest can view the vase at any given time.
- **Concurrent Guests Handling**: Each guest is represented by a separate thread, simulating simultaneous attendance at the party.
- **Efficient Resource Management**: The use of semaphore efficiently manages the access to the limited resource (the vase).

## Correctness
- **Semaphore for Synchronization**: Ensures that only one thread (guest) accesses the critical section (viewing the vase) at a time.
- **Thread Safety**: The semaphore handles thread synchronization to prevent race conditions.
- **Reliable Guest Processing**: Each guest thread correctly acquires and releases the semaphore, ensuring orderly and fair access.

## Efficiency
- **Thread Management**: Efficient creation and management of guest threads for parallel execution.
- **Resource Locking**: Semaphore optimizes performance by minimizing contention for resource access.
- **Non-blocking Approach**: Threads wait for resource availability without blocking each other's execution.

## Experimental Evaluation
- **Functional Testing**: Test the program by varying the number of guests to ensure correct semaphore behavior.
- **Concurrency Analysis**: Evaluate the program's ability to handle concurrent access without deadlocks or resource conflicts.
- **Performance Measurement**: Assess the time taken for all guests to view the vase, especially as the number of guests increases.
